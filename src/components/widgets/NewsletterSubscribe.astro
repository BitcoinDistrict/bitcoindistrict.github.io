---
export interface Props {
  title?: string;
  subtitle?: string;
  placeholder?: string;
  buttonText?: string;
  variant?: 'default' | 'compact';
  showName?: boolean;
  label?: string;
}

const {
  title = 'Subscribe to our newsletter',
  subtitle = "Get the latest updates about Bitcoin in the District delivered to your inbox.",
  placeholder = 'Enter your email',
  buttonText = 'Subscribe',
  variant = 'default',
  showName = false,
  label = 'Bitcoin District Newsletter'
} = Astro.props;

const isCompact = variant === 'compact';
---

<div class={`newsletter-subscribe ${isCompact ? 'compact' : ''}`}>
  {!isCompact && (
    <div class="text-center mb-6">
      {title && <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-2">{title}</h2>}
      {subtitle && <p class="text-gray-600 dark:text-gray-300">{subtitle}</p>}
    </div>
  )}

  <form data-newsletter-form class="newsletter-form" novalidate>
    <input type="hidden" name="label" value={label} />
    
    <div class={`flex flex-col ${isCompact ? 'sm:flex-row' : ''} gap-3`}>
      {showName && !isCompact && (
        <div>
          <label for="name" class="sr-only">Name</label>
          <input
            type="text"
            name="name"
            id="name"
            autocomplete="name"
            placeholder="Your name (optional)"
            class="w-full px-4 py-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-800 dark:border-gray-600 dark:text-white dark:placeholder-gray-400"
          />
        </div>
      )}
      
      <div class={isCompact ? 'flex-1' : ''}>
        <label for="email" class="sr-only">Email address</label>
        <input
          type="email"
          name="email"
          id="email"
          required
          autocomplete="email"
          inputmode="email"
          placeholder={placeholder}
          class={`w-full ${isCompact ? 'px-3 py-2 text-sm' : 'px-4 py-3'} border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-800 dark:border-gray-600 dark:text-white dark:placeholder-gray-400 ${isCompact ? 'rounded-r-none' : ''}`}
        />
      </div>
      
      <button
        type="submit"
        class={`${isCompact ? 'px-4 py-2 text-sm' : 'px-6 py-3'} bg-blue-600 text-white font-medium rounded-md hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed ${isCompact ? 'rounded-l-none' : ''}`}
      >
        <span class="submit-text">{buttonText}</span>
        <span class="loading-text hidden">
          <svg class="inline w-4 h-4 mr-1 animate-spin" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          Subscribing...
        </span>
      </button>
    </div>

    <!-- Status Messages -->
    <div class="mt-4">
      <div class="success-message hidden p-4 bg-green-50 border border-green-200 rounded-md">
        <div class="flex">
          <svg class="w-5 h-5 text-green-400 mr-2 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
          </svg>
          <div>
            <h3 class="text-sm font-medium text-green-800">Success!</h3>
            <p class="text-sm text-green-700 mt-1">Check your email to confirm your subscription.</p>
          </div>
        </div>
      </div>

      <div class="error-message hidden p-4 bg-red-50 border border-red-200 rounded-md">
        <div class="flex">
          <svg class="w-5 h-5 text-red-400 mr-2 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
          </svg>
          <div>
            <h3 class="text-sm font-medium text-red-800">Error</h3>
            <p class="text-sm text-red-700 mt-1 error-text">Something went wrong. Please try again.</p>
          </div>
        </div>
      </div>
    </div>
  </form>
  
  <noscript>
    <div class="mt-4 p-4 bg-yellow-50 border border-yellow-200 rounded-md">
      <p class="text-sm text-yellow-800">
        JavaScript is required for newsletter subscription. Please enable JavaScript or visit 
        <a href="https://news.bitcoindistrict.org" class="underline hover:text-yellow-900" target="_blank" rel="noopener">
          news.bitcoindistrict.org
        </a> directly to subscribe.
      </p>
    </div>
  </noscript>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    console.log('Newsletter subscription script loaded');
    const forms = document.querySelectorAll<HTMLFormElement>('[data-newsletter-form]');
    console.log('Found newsletter forms:', forms.length);
    
    forms.forEach((form, index) => {
      console.log(`Setting up form ${index}`);
      form.addEventListener('submit', async function(e) {
        console.log('Form submitted, preventing default');
        e.preventDefault();
        
        const formData = new FormData(form);
        const email = formData.get('email') as string;
        const name = formData.get('name') as string;
        const label = formData.get('label') as string;
        
        console.log('Form data:', { email, name, label });
        
        if (!email) {
          console.error('No email provided');
          return;
        }
        
        // Update UI state
        const submitBtn = form.querySelector<HTMLButtonElement>('button[type="submit"]');
        const submitText = submitBtn?.querySelector('.submit-text');
        const loadingText = submitBtn?.querySelector('.loading-text');
        const successMessage = form.querySelector('.success-message');
        const errorMessage = form.querySelector('.error-message');
        const errorText = errorMessage?.querySelector('.error-text');
        
        console.log('Form elements found:', {
          submitBtn: !!submitBtn,
          submitText: !!submitText,
          loadingText: !!loadingText,
          successMessage: !!successMessage,
          errorMessage: !!errorMessage,
          errorText: !!errorText
        });
        
        if (!submitBtn || !submitText || !loadingText || !successMessage || !errorMessage || !errorText) {
          console.error('Required form elements not found');
          alert('Form setup error. Please refresh the page and try again.');
          return;
        }
        
        // Reset states
        successMessage.classList.add('hidden');
        errorMessage.classList.add('hidden');
        submitBtn.disabled = true;
        submitText.classList.add('hidden');
        loadingText.classList.remove('hidden');
        
        try {
          console.log('Starting subscription process...');
          
          // For static hosting, we'll call Ghost directly
          const ghostUrl = 'https://news.bitcoindistrict.org';
          
          // First, get an integrity token
          console.log('Fetching integrity token...');
          const integrityResponse = await fetch(`${ghostUrl}/members/api/integrity-token/`, {
            method: 'GET',
            headers: {
              'app-pragma': 'no-cache',
              'x-ghost-version': '5.98'
            }
          });

          console.log('Integrity response status:', integrityResponse.status);
          
          if (!integrityResponse.ok) {
            throw new Error(`Failed to get integrity token: ${integrityResponse.status}`);
          }

          const integrityToken = await integrityResponse.text();
          console.log('Got integrity token:', integrityToken.substring(0, 20) + '...');

          // Prepare the subscription data
          const subscriptionData = {
            email: email,
            emailType: 'subscribe',
            integrityToken: integrityToken,
            ...(name && name.trim() ? { name: name.trim() } : {}),
            ...(label && label.trim() ? { labels: [label.trim()] } : {})
          };

          console.log('Sending subscription request with data:', {
            ...subscriptionData,
            integrityToken: integrityToken.substring(0, 20) + '...'
          });

          // Send magic link to user (requires email confirmation)
          const response = await fetch(`${ghostUrl}/members/api/send-magic-link/`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            },
            body: JSON.stringify(subscriptionData)
          });
          
          console.log('Subscription response status:', response.status);
          
          if (response.ok || response.status === 201) {
            console.log('Subscription successful!');
            successMessage.classList.remove('hidden');
            form.reset();
            
            // Scroll to success message for better UX
            successMessage.scrollIntoView({ behavior: 'smooth', block: 'center' });
          } else {
            console.log('Subscription failed with status:', response.status);
            // Try to get error details from Ghost
            let errorMsg = 'Failed to subscribe to newsletter';
            try {
              const result = await response.json();
              console.log('Error response:', result);
              if (result.errors && result.errors[0] && result.errors[0].message) {
                errorMsg = result.errors[0].message;
              }
            } catch (e) {
              console.error('Failed to parse error response:', e);
              // If we can't parse the error, use the default message
            }
            errorText.textContent = errorMsg;
            errorMessage.classList.remove('hidden');
            errorMessage.scrollIntoView({ behavior: 'smooth', block: 'center' });
          }
        } catch (error) {
          console.error('Newsletter subscription error:', error);
          let errorMsg = 'Network error. Please check your connection and try again.';
          
          // Provide more specific error messages
          if (error instanceof TypeError && error.message.includes('fetch')) {
            errorMsg = 'Unable to connect to the newsletter service. Please try again later.';
          } else if (error instanceof Error) {
            errorMsg = error.message;
          }
          
          errorText.textContent = errorMsg;
          errorMessage.classList.remove('hidden');
          errorMessage.scrollIntoView({ behavior: 'smooth', block: 'center' });
        } finally {
          // Reset button state
          console.log('Resetting button state');
          submitBtn.disabled = false;
          submitText.classList.remove('hidden');
          loadingText.classList.add('hidden');
        }
      });
    });
  });
</script>

<style>
  .newsletter-subscribe.compact {
    @apply max-w-md;
  }
  
  .newsletter-subscribe:not(.compact) {
    @apply max-w-lg mx-auto;
  }
  
  @media (max-width: 640px) {
    .newsletter-subscribe.compact .newsletter-form {
      @apply flex-col;
    }
    
    .newsletter-subscribe.compact button {
      @apply rounded-md;
    }
    
    .newsletter-subscribe.compact input[type="email"] {
      @apply rounded-md;
    }
  }
</style>