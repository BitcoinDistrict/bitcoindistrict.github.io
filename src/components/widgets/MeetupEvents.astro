---
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import Headline from '~/components/ui/Headline.astro';
import Button from '~/components/ui/Button.astro';
import Image from '~/components/common/Image.astro';
import { Icon } from 'astro-icon/components';
import { fetchMeetupEvents, formatEventDescription, formatEventTime, type MeetupEvent } from '~/utils/events';
import { meetupSources, eventsConfig } from '~/data/events-config';
import { getFormattedDate } from '~/utils/utils';

export interface Props {
  title?: string;
  subtitle?: string;
  tagline?: string;
  id?: string;
  isDark?: boolean;
  classes?: {
    container?: string;
    headline?: Record<string, string>;
  };
  bg?: any;
  maxEvents?: number;
  showCallToAction?: boolean;
  /** Maximum months ahead to display in UI (no effect on ICS). Default 9. */
  maxMonthsAhead?: number;
  /** Whether to show the meetup filter tabs above the grid. Default true. */
  showFilterTabs?: boolean;
  /** Enable special highlighting for events whose title matches given keywords */
  highlightEnabled?: boolean;
  /** List of case-insensitive keywords to match in event titles */
  highlightKeywords?: string[];
  /** Tailwind classes applied to highlighted cards */
  highlightCardClass?: string;
}

const {
  title = 'Upcoming Events',
  subtitle = 'Join us at our upcoming Bitcoin District events',
  tagline,
  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
  maxEvents,
  showCallToAction = true,
  maxMonthsAhead = eventsConfig.defaultMaxMonthsAhead,
  showFilterTabs = true,
  highlightEnabled = eventsConfig.highlight?.enabled ?? true,
  highlightKeywords = eventsConfig.highlight?.keywords ?? ['conference'],
  highlightCardClass = eventsConfig.highlight?.cardClass ?? 'ring-2 ring-amber-400 dark:ring-amber-300 ring-offset-2 ring-offset-white dark:ring-offset-slate-900',
} = Astro.props;

// Fetch events at build time and limit if maxEvents is specified
let events: MeetupEvent[] = [];
try {
  const allEvents = await fetchMeetupEvents();
  // Apply UI-only upper window filter by months ahead
  const now = new Date();
  const monthsAheadDate = new Date(now);
  monthsAheadDate.setMonth(monthsAheadDate.getMonth() + (maxMonthsAhead ?? 9));
  const filteredByWindow = allEvents.filter(e => e.startDate <= monthsAheadDate);
  // Limit recurring series (same meetup source + same normalized title) to next 2 occurrences
  const normalizeTitleForSeries = (title: string) => title.trim().toLowerCase().replace(/\s+/g, ' ');
  const seriesCounts = new Map<string, number>();
  const limitedSeries: MeetupEvent[] = [];
  for (const e of filteredByWindow) {
    const key = `${e.source}|${normalizeTitleForSeries(e.title)}`;
    const count = seriesCounts.get(key) ?? 0;
    if (count < 2) {
      limitedSeries.push(e);
      seriesCounts.set(key, count + 1);
    }
  }
  events = maxEvents ? limitedSeries.slice(0, maxEvents) : limitedSeries;
} catch (error) {
  console.error('Failed to fetch meetup events:', error);
}

// Helper function to get meetup source info including logo
const getMeetupSource = (eventSource: string) => {
  return meetupSources.find(source => source.name === eventSource);
};

// Weekday helper (ET)
const getWeekdayName = (date: Date) =>
  new Intl.DateTimeFormat('en-US', { weekday: 'long', timeZone: 'America/New_York' }).format(date);

// Compute which meetup sources actually have upcoming events
const activeMeetupSources = meetupSources.filter((source) =>
  source.enabled && events.some((e) => e.source === source.name)
);

// Determine if there are any manual events (for the Other tab)
const hasManualEvents = events.some((e) => !getMeetupSource(e.source));

// Highlight helper
const shouldHighlight = (title: string): boolean => {
  if (!highlightEnabled) return false;
  if (!title) return false;
  const normalized = title.toLowerCase();
  return (highlightKeywords || []).some((kw) => normalized.includes(String(kw || '').toLowerCase()));
};
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-6xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <Headline title={title} subtitle={subtitle} tagline={tagline} classes={classes?.headline} />
  
  {/* Filter Tabs */}
  {events.length > 0 && showFilterTabs && (
    <div class="mb-4 md:mb-6">
      <div class="flex flex-wrap items-center gap-2 md:gap-3" data-meetup-filter>
        {/* All tab (default active) */}
        <button
          type="button"
          class="px-3 py-1.5 md:px-4 md:py-2 rounded-full text-sm md:text-base border transition-colors bg-primary text-white border-primary"
          data-filter="all"
          aria-pressed="true"
        >
          All
        </button>
        {/* One tab per enabled meetup source */}
        {activeMeetupSources.map((s) => (
          <button
            type="button"
            class="px-3 py-1.5 md:px-4 md:py-2 rounded-full text-sm md:text-base border border-gray-300 dark:border-gray-700 transition-colors bg-white dark:bg-slate-800 text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-slate-700"
            data-filter={s.name}
            aria-pressed="false"
          >
            {s.name}
          </button>
        ))}
        {/* Other (manual events) */}
        {hasManualEvents && (
          <button
            type="button"
            class="px-3 py-1.5 md:px-4 md:py-2 rounded-full text-sm md:text-base border border-gray-300 dark:border-gray-700 transition-colors bg-white dark:bg-slate-800 text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-slate-700"
            data-filter="other"
            aria-pressed="false"
          >
            Other
          </button>
        )}
      </div>
    </div>
  )}
  
  {events.length > 0 ? (
    <div class="grid gap-4 md:gap-5 grid-cols-2 md:grid-cols-3 lg:grid-cols-4" data-meetup-events>
      {events.map((event) => (
        <article class={`group relative overflow-hidden rounded-lg border border-gray-200 bg-white shadow-lg transition-all duration-300 hover:shadow-xl dark:border-gray-700 dark:bg-slate-900 flex flex-col aspect-square ${shouldHighlight(event.title) ? highlightCardClass : ''}`} data-source={event.source} data-type={getMeetupSource(event.source) ? 'meetup' : 'manual'}>
          {/* Card Header with Date and Conditional Meetup Icon */}
          {(() => {
            const meetupSource = getMeetupSource(event.source);
            const headerBg = meetupSource?.headerBgClass || 'bg-primary';
            return (
              <div class={`${headerBg} px-3 py-2.5 md:px-4 md:py-3 text-white flex items-center justify-between`}>
                <div class="text-sm md:text-base font-semibold leading-tight">
                  {getFormattedDate(event.startDate)}
                  <div class="text-[11px] md:text-xs italic opacity-90 font-normal">
                    {getWeekdayName(event.startDate)}
                  </div>
                </div>
                {/* Show Meetup icon only for events from configured meetup sources */}
                {meetupSource ? (
                  <a 
                    href={meetupSource.url} 
                    target="_blank" 
                    rel="noopener noreferrer"
                    class="hover:opacity-100 transition-opacity"
                    title={`Visit ${meetupSource.name} on Meetup`}
                  >
                    <Icon name="tabler:brand-meetup" class="h-5 w-5 opacity-80 hover:opacity-100" />
                  </a>
                ) : null}
              </div>
            );
          })()}
          
          {/* Event Content - Flex grow to push time to bottom */}
          <div class="p-3 md:p-4 md:pr-16 flex-grow flex flex-col justify-between min-h-0 gap-2.5 md:gap-3.5">
            <div>
              {/* Title */}
              {event.url ? (
                <a
                  href={event.url}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="text-lg md:text-xl font-bold text-gray-900 dark:text-white group-hover:text-primary transition-colors leading-snug js-event-title [text-wrap:balance] break-words hyphens-auto"
                >
                  {event.title}
                </a>
              ) : (
                <h3 class="text-lg md:text-xl font-bold text-gray-900 dark:text-white group-hover:text-primary transition-colors leading-snug js-event-title [text-wrap:balance] break-words hyphens-auto">
                  {event.title}
                </h3>
              )}
              
              {/* Meetup Group Name */}
              <div class="text-xs italic text-gray-500 dark:text-gray-400 mt-1">
                {event.source}
              </div>
            </div>
            
            {/* Time - pinned to bottom */}
            <div class="mt-0 text-xs md:text-sm text-gray-600 dark:text-gray-300">
              {formatEventTime(event.startDate, event.endDate)}
            </div>
          </div>
          
          {/* Bottom-right logo (md+ only) */}
          {(() => {
            const meetupSource = getMeetupSource(event.source);
            const logoSrc = meetupSource?.logo || event.icon;
            const logoUrl = meetupSource?.url;
            const logoAlt = meetupSource ? `${meetupSource.name} logo` : `${event.source} logo`;

            if (!logoSrc) return null;

            const logoElement = (
              <Image
                src={logoSrc}
                alt={logoAlt}
                class="h-10 w-10 rounded-full object-cover border-2 border-gray-200 dark:border-gray-600 hover:border-primary transition-colors"
                width={40}
                height={40}
                loading="lazy"
              />
            );

            return (
              <div class="absolute bottom-2 right-2 md:bottom-3 md:right-3 hidden md:block z-10">
                {logoUrl ? (
                  <a
                    href={logoUrl}
                    target="_blank"
                    rel="noopener noreferrer"
                    title={`Visit ${meetupSource?.name || event.source}`}
                    class="block hover:scale-105 transition-transform"
                  >
                    {logoElement}
                  </a>
                ) : (
                  logoElement
                )}
              </div>
            );
          })()}

          {/* Hover Effect Overlay */}
          <div class="absolute inset-0 bg-gradient-to-br from-primary/5 to-transparent opacity-0 transition-opacity duration-300 group-hover:opacity-100 pointer-events-none"></div>
        </article>
      ))}
    </div>
  ) : (
    <div class="text-center py-12">
      <Icon name="tabler:calendar-off" class="h-16 w-16 mx-auto text-gray-400 dark:text-gray-500 mb-4" />
      <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">No Upcoming Events</h3>
      <p class="text-gray-600 dark:text-gray-300 mb-6">
        Check back soon for new Bitcoin District events, or follow us on social media for updates.
      </p>
      <Button
        variant="primary"
        text="Join Our Meetup Group"
        href="https://www.meetup.com/bitcoin-district/"
        target="_blank"
        rel="noopener noreferrer"
        class="inline-flex items-center gap-2"
      >
        <Icon name="tabler:external-link" class="h-4 w-4" />
        Join Meetup
      </Button>
    </div>
  )}
  
  {/* Call to Action */}
  {events.length > 0 && showCallToAction && (
    <div class="mt-12 text-center">
      <div class="rounded-lg bg-gray-50 p-8 dark:bg-slate-800">
        <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-4">
          Want to stay updated?
        </h3>
        <p class="text-gray-600 dark:text-gray-300 mb-6 max-w-2xl mx-auto">
          Join our Meetup group to get notified about all upcoming Bitcoin District events and never miss an opportunity to connect with fellow Bitcoiners.
        </p>
        <div class="flex flex-col sm:flex-row gap-4 justify-center">
          <Button
            variant="primary"
            text="Join a Meetup"
            href="/meetups"
            target="_self"
            rel="noopener noreferrer"
            class="inline-flex items-center gap-2"
          >
            <Icon name="tabler:users" class="h-5 w-5" />
            Join Meetup
          </Button>
          <Button
            variant="secondary"
            text="Follow us on X"
            href="https://x.com/BTCDistrict"
            target="_blank"
            rel="noopener noreferrer"
            class="inline-flex items-center gap-2"
          >
            <Icon name="tabler:brand-x" class="h-5 w-5" />
            Follow Us
          </Button>
        </div>
      </div>
    </div>
  )}
</WidgetWrapper>

<script>
  // Fit event titles to avoid clipping within square cards by reducing font-size
  (function () {
    const ROOT_SELECTOR = '[data-meetup-events] .js-event-title';
    const MAX_LINES_MOBILE = 3; // allow an extra line on mobile and increase title size
    const MAX_LINES_DESKTOP = 4; // allow more lines on desktop per request
    const MIN_FONT_PX = 14; // don't shrink too small
    const MAX_SHRINK_PX_MOBILE = 2; // cap shrink amount for long titles
    const MAX_SHRINK_PX_DESKTOP = 3;

      // Filtering logic
      function setupFilter() {
        const containerEl = document.querySelector('[data-meetup-events]') as Element | null;
        const filterBar = document.querySelector('[data-meetup-filter]') as Element | null;
        if (!containerEl || !filterBar) return;

        // Prevent duplicate initialization (e.g., after HMR or repeated inits)
        if (filterBar.getAttribute('data-initialized') === 'true') return;
        filterBar.setAttribute('data-initialized', 'true');

        const buttons = Array.from(filterBar.querySelectorAll('button')) as HTMLButtonElement[];

        function setActive(button: HTMLButtonElement) {
          buttons.forEach((btn) => {
            const isActive = btn === button;
            btn.setAttribute('aria-pressed', String(isActive));
            if (isActive) {
              btn.classList.remove('bg-white', 'dark:bg-slate-800', 'text-gray-700', 'dark:text-gray-200', 'hover:bg-gray-50', 'dark:hover:bg-slate-700', 'border-gray-300', 'dark:border-gray-700');
              btn.classList.add('bg-primary', 'text-white', 'border-primary');
            } else {
              btn.classList.add('bg-white', 'dark:bg-slate-800', 'text-gray-700', 'dark:text-gray-200', 'hover:bg-gray-50', 'dark:hover:bg-slate-700', 'border-gray-300', 'dark:border-gray-700');
              btn.classList.remove('bg-primary', 'text-white', 'border-primary');
            }
          });
        }

        function applyFilter(containerNode: Element, value: string) {
          const cards = Array.from(containerNode.querySelectorAll('article[data-source]')) as HTMLElement[];
          cards.forEach((card: HTMLElement) => {
            const source = card.getAttribute('data-source') || '';
            const type = card.getAttribute('data-type') || '';
            let show = true;
            if (value === 'all') {
              show = true;
            } else if (value === 'other') {
              show = type === 'manual';
            } else {
              show = source === value;
            }
            card.style.display = show ? '' : 'none';
          });
        }

        filterBar.addEventListener('click', (e) => {
          const target = e.target as Element | null;
          if (!target) return;
          const button = target.closest('button[data-filter]') as HTMLButtonElement | null;
          if (!button) return;
          const value = button.getAttribute('data-filter') || 'all';
          setActive(button);
          applyFilter(containerEl, value);
          // Refit titles in case wrapping changes the flow
          scheduleFit();
        });
      }

    function getMaxLines() {
      return window.matchMedia('(min-width: 768px)').matches ? MAX_LINES_DESKTOP : MAX_LINES_MOBILE;
    }

    function fitTitle(el) {
      if (!el) return;
      // Reset any previous inline size to recalc from stylesheet
      el.style.fontSize = '';
      const style = window.getComputedStyle(el);
      let fontSize = parseFloat(style.fontSize) || 16;
      const lineHeightVal = style.lineHeight;
      let lineHeight = parseFloat(lineHeightVal);
      if (!lineHeight || lineHeightVal === 'normal') {
        lineHeight = fontSize * 1.2;
      }
      const maxLines = getMaxLines();
      const maxHeight = lineHeight * maxLines + 0.5; // small buffer

      // If element is not visible (e.g., hidden via display:none for breakpoint), skip
      const display = style.display;
      if (display === 'none') return;

      const isDesktop = window.matchMedia('(min-width: 768px)').matches;
      const maxShrink = isDesktop ? MAX_SHRINK_PX_DESKTOP : MAX_SHRINK_PX_MOBILE;
      const allowedMin = Math.max(MIN_FONT_PX, fontSize - maxShrink);

      let guard = 0;
      while (el.scrollHeight > maxHeight && fontSize > allowedMin && guard < 24) {
        fontSize -= 1;
        el.style.fontSize = fontSize + 'px';
        guard++;
      }
    }

    function fitAll() {
      const nodes = document.querySelectorAll(ROOT_SELECTOR);
      nodes.forEach((el) => fitTitle(el));
    }

    let rafId = 0;
    function scheduleFit() {
      cancelAnimationFrame(rafId);
      rafId = requestAnimationFrame(fitAll);
    }

    // Init function used across initial load and Astro client-side swaps
    function init() {
      scheduleFit();
      setupFilter();
    }

    // Initial
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', init, { once: true });
    } else {
      init();
    }

    // Re-initialize after Astro client-side navigations/HMR swaps
    document.addEventListener('astro:page-load', init);
    document.addEventListener('astro:after-swap', init);

    // Refit on resize and orientation change
    window.addEventListener('resize', scheduleFit);
    window.addEventListener('orientationchange', scheduleFit);
  })();
</script>